// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  ADMIN
  USER
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  stock       Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  gender      Gender
  tags        String[] @default([])

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  ProductImage ProductImage[]
  OrderItem    OrderItem[]

  @@index([gender])
}

model ProductImage {
  id  String @id @default(uuid())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

// Next Auth
model User {
  id            String    @id @default(cuid())
  name          String?
  role          Role      @default(USER)
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Address   Address[]
  Order     Order[]
}

model Account {
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Address {
  id         String  @id @default(uuid())
  name       String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  country    String
  phone      String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User         @relation(fields: [userId], references: [id])
  userId         String
  OrderItem      OrderItem[]
  OrderAddress   OrderAddress?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  Product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String  @id @default(uuid())
  name       String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  country    String
  phone      String

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}
